name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  cache-pnpm-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --prefer-offline]

  cache-pnpm-setup:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./setup
    steps:
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --prefer-offline]

  lint-server:
    needs: [cache-pnpm-server]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --prefer-offline]
      - name: Run lint in server
        working-directory: ./server
        run: pnpm eslint

  lint-setup:
    needs: [cache-pnpm-setup]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./setup
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --prefer-offline]
      - name: Run lint in server
        working-directory: ./server
        run: pnpm eslint

  build-server:
    needs: [cache-pnpm-server]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --prefer-offline]
      - name: Compile
        run: pnpm build
      - name: Run build
        run: |
          docker build -t kimifeel-server .
          docker save --output ./kimifeel-server.tar kimifeel-server
      - uses: actions/upload-artifact@v2
        with:
          name: server-image
          path: kimifeel-server.tar

  build-setup:
    needs: [cache-pnpm-setup]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./setup
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16
      - uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-
      - uses: pnpm/action-setup@v2.0.1
        with:
          version: 6
          run_install: |
            - recursive: true
              args: [--frozen-lockfile, --prefer-offline]
      - name: Compile
        run: pnpm build
      - name: Run build
        run: |
          docker build -t kimifeel-setup .
          docker save --output ./kimifeel-setup.tar kimifeel-setup
      - uses: actions/upload-artifact@v2
        with:
          name: setup-image
          path: kimifeel-setup.tar

  deploy:
    needs: [lint-server, lint-setup, build-server, build-setup]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
        with:
          name: server-image
          path: kimifeel-server.tar
      - uses: actions/download-artifact@v2
        with:
          name: setup-image
          path: kimifeel-setup.tar
      - name: Deploy with SCP
        uses: appleboy/scp-action@master
        with:
          key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "server/kimifeel-server.tar,setup/kimifeel-setup.tar"
          target: ${{ secrets.SSH_PATH }}
      - name: Restart the service
        uses: appleboy/ssh-action@master
        with:
          key: ${{ secrets.SSH_KEY }}
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: ${{ secrets.SSH_COMMAND }}
